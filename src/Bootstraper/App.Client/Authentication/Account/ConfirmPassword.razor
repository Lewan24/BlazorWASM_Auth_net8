@page "/account/ConfirmPassword/{PageName}"

@layout AuthLayout

@using System.ComponentModel.DataAnnotations
@using global::App.Models.Auth.Shared.Interfaces
@using Microsoft.AspNetCore.Authorization

@inject ISnackbar snackBar
@inject AuthStateProvider Provider
@inject NavigationManager Nav

@attribute [Authorize]

<MudContainer Class="d-flex flex-row pa-4 mt-16 justify-center confirmPasswordContainer">
    <MudContainer Class="d-flex flex-column">
        <MudText Align="Align.Center">Confirm your authority</MudText>

        <EditForm Model="@_confirmPasswordModel" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            
            <MudCard Class="my-4">
                <MudCardContent>
                    <MudTextField Label="Password" Disabled="@_isConfirming"
                                  @bind-Value="_confirmPasswordModel.Password" For="() => _confirmPasswordModel.Password" InputType="InputType.Password"/>
                </MudCardContent>
                <MudCardActions>
                    @if (_isConfirming)
                    {
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Small"/>
                    }
                    else
                    {
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" StartIcon="@Icons.Material.Filled.ArrowRight">Confirm</MudButton>
                    }
                </MudCardActions>
            </MudCard>
        </EditForm>
    </MudContainer>
</MudContainer>

<style>
    .confirmPasswordContainer{
        max-width: 500px;
    }
</style>

@code {
    [Parameter]
    public string? PageName { get; set; }

    private readonly ConfirmPasswordModel _confirmPasswordModel = new();
    private bool _isConfirming;

    private async Task OnValidSubmit()
    {
        _isConfirming = true;

        if (!await Provider.TryLogin(_confirmPasswordModel.Password))
        {
            snackBar.Add("Wrong Authorization", Severity.Error);
            _isConfirming = false;
            return;
        }

        try
        {
            await Provider.GetCurrentUserToken(_confirmPasswordModel.Password);
            Nav.NavigateTo($"/{PageName?.Replace('-', '/')}");
        }
        catch (Exception e)
        {
            snackBar.Add(e.Message, Severity.Error);
            _isConfirming = false;
        }
    }

    private sealed class ConfirmPasswordModel
    {
        [Required]
        [MaxLength(50)]
        public string? Password { get; set; }
    }
}
